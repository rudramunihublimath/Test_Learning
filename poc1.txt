
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

public class GitLabBranchCreator {

    private static final String GITLAB_URL = "https://xyz"; // GitLab base URL (no .git)
    private static final String PROJECT_PATH = "<<APINAME>>"; // namespace/project name
    private static final String PERSONAL_ACCESS_TOKEN = "YOUR_TOKEN"; // your PAT
    private static final String BASE_BRANCH = "main"; // source branch
    private static final String NEW_BRANCH = "release-package"; // target branch

    public static void main(String[] args) throws Exception {
        // Encode project path for URL safety
        String encodedProject = URLEncoder.encode(PROJECT_PATH, StandardCharsets.UTF_8.toString());

        // 1. Create branch
        String createBranchUrl = GITLAB_URL + "/projects/" + encodedProject + "/repository/branches";
        String branchPayload = String.format("{\"branch\":\"%s\",\"ref\":\"%s\"}", NEW_BRANCH, BASE_BRANCH);

        int branchResponse = sendPost(createBranchUrl, branchPayload);
        if (branchResponse == 201) {
            System.out.println("✅ Branch created: " + NEW_BRANCH);
        } else if (branchResponse == 400) {
            System.out.println("⚠️ Branch may already exist: " + NEW_BRANCH);
        } else {
            System.out.println("❌ Failed to create branch, HTTP code: " + branchResponse);
        }

        // 2. Protect branch with custom rules
        String protectBranchUrl = GITLAB_URL + "/api/v4/projects/" + encodedProject + "/protected_branches";
        String protectPayload = String.format(
                "{ \"name\": \"%s\", " +
                "  \"push_access_level\": 40, " +   // only Maintainers can push
                "  \"merge_access_level\": 40, " +  // only Maintainers can merge
                "  \"allow_force_push\": false, " +
                "  \"unprotect_access_level\": 40 }", NEW_BRANCH);

        int protectResponse = sendPost(protectBranchUrl, protectPayload);
        if (protectResponse == 201) {
            System.out.println("✅ Branch protected successfully: " + NEW_BRANCH);
        } else if (protectResponse == 400) {
            System.out.println("⚠️ Branch may already be protected: " + NEW_BRANCH);
        } else {
            System.out.println("❌ Failed to protect branch, HTTP code: " + protectResponse);
        }
    }

    // Helper method to send POST requests
    private static int sendPost(String apiUrl, String jsonPayload) throws Exception {
        URL url = new URL(apiUrl);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setRequestProperty("PRIVATE-TOKEN", PERSONAL_ACCESS_TOKEN);
        conn.setRequestProperty("Content-Type", "application/json");
        conn.setDoOutput(true);

        try (OutputStream os = conn.getOutputStream()) {
            os.write(jsonPayload.getBytes(StandardCharsets.UTF_8));
        }

        int responseCode = conn.getResponseCode();
        conn.disconnect();
        return responseCode;
    }
}

package com.example.gitlab.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@Service
public class GitLabService {

    private final RestTemplate restTemplate = new RestTemplate();

    /**
     * Step 1 - Get projectId from project name
     */
    public Integer getProjectIdByName(String projectName) {
        String url = UriComponentsBuilder.fromHttpUrl(gitlabUrl + "/projects")
                .queryParam("search", projectName)
                .toUriString();

        HttpHeaders headers = new HttpHeaders();
        headers.set("PRIVATE-TOKEN", adminToken);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<Map[]> response = restTemplate.exchange(url, HttpMethod.GET, entity, Map[].class);

        if (response.getBody() != null && response.getBody().length > 0) {
            return (Integer) response.getBody()[0].get("id"); // return first match
        }

        throw new RuntimeException("Project not found: " + projectName);
    }

    /**
     * Step 2 - Create Project Access Token
     */
    public String createProjectAccessToken(Integer projectId) {
        String url = gitlabUrl + "/projects/" + projectId + "/access_tokens";

        HttpHeaders headers = new HttpHeaders();
        headers.set("PRIVATE-TOKEN", adminToken);
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, Object> body = new HashMap<>();
        body.put("name", "pat_token");
        body.put("scopes", new String[]{"api"}); // add more scopes if needed
        body.put("expires_at", LocalDate.now().plusMonths(10).toString()); // expiry = 10 months

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(body, headers);

        ResponseEntity<Map> response = restTemplate.exchange(url, HttpMethod.POST, entity, Map.class);

        if (response.getStatusCode() == HttpStatus.CREATED) {
            return (String) response.getBody().get("token"); // actual token value
        }

        throw new RuntimeException("Failed to create project access token: " + response);
    }

    /**
     * Step 3 - Create CI/CD Variables
     */
    public void createCiCdVariables(Integer projectId, String tokenName, String tokenValue) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("PRIVATE-TOKEN", adminToken);
        headers.setContentType(MediaType.APPLICATION_JSON);

        // 1st Variable: pat_name
        Map<String, Object> patNameVar = new HashMap<>();
        patNameVar.put("key", "pat_name");
        patNameVar.put("value", tokenName);

        restTemplate.postForEntity(gitlabUrl + "/projects/" + projectId + "/variables",
                new HttpEntity<>(patNameVar, headers), Map.class);

        // 2nd Variable: pat_token
        Map<String, Object> patTokenVar = new HashMap<>();
        patTokenVar.put("key", "pat_token");
        patTokenVar.put("value", tokenValue);

        restTemplate.postForEntity(gitlabUrl + "/projects/" + projectId + "/variables",
                new HttpEntity<>(patTokenVar, headers), Map.class);
    }

    /**
     * Orchestrator method
     */
    public void execute(String projectName) {
        Integer projectId = getProjectIdByName(projectName);
        String tokenValue = createProjectAccessToken(projectId);
        createCiCdVariables(projectId, "pat_token", tokenValue);
        System.out.println("âœ… Project Access Token created and CI/CD variables added.");
    }
}
